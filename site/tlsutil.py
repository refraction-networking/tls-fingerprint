
psk_key_exchange_modes_dict = {\
 0x00: "psk_ke",
 0x01: "psk_dhe_ke",
}

cipher_dict = {\
  0x0000: "TLS_NULL_WITH_NULL_NULL",
  0x0001: "TLS_RSA_WITH_NULL_MD5",
  0x0002: "TLS_RSA_WITH_NULL_SHA",
  0x0003: "TLS_RSA_EXPORT_WITH_RC4_40_MD5",
  0x0004: "TLS_RSA_WITH_RC4_128_MD5",
  0x0005: "TLS_RSA_WITH_RC4_128_SHA",
  0x0006: "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5",
  0x0007: "TLS_RSA_WITH_IDEA_CBC_SHA",
  0x0008: "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA",
  0x0009: "TLS_RSA_WITH_DES_CBC_SHA",
  0x000a: "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
  0x000b: "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA",
  0x000c: "TLS_DH_DSS_WITH_DES_CBC_SHA",
  0x000d: "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA",
  0x000e: "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA",
  0x000f: "TLS_DH_RSA_WITH_DES_CBC_SHA",
  0x0010: "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA",
  0x0011: "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA",
  0x0012: "TLS_DHE_DSS_WITH_DES_CBC_SHA",
  0x0013: "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
  0x0014: "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA",
  0x0015: "TLS_DHE_RSA_WITH_DES_CBC_SHA",
  0x0016: "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA",
  0x0017: "TLS_DH_anon_EXPORT_WITH_RC4_40_MD5",
  0x0018: "TLS_DH_anon_WITH_RC4_128_MD5",
  0x0019: "TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA",
  0x001a: "TLS_DH_anon_WITH_DES_CBC_SHA",
  0x001b: "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA",
  0xc01c: "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA",
  0xc01d: "TLS_SRP_SHA_WITH_AES_128_CBC_SHA",
  0x001e: "TLS_KRB5_WITH_DES_CBC_SHA",
  0x001f: "TLS_KRB5_WITH_3DES_EDE_CBC_SHA",
  0x0020: "TLS_KRB5_WITH_RC4_128_SHA",
  0x0021: "TLS_KRB5_WITH_IDEA_CBC_SHA",
  0x0022: "TLS_KRB5_WITH_DES_CBC_MD5",
  0x0023: "TLS_KRB5_WITH_3DES_EDE_CBC_MD5",
  0x0024: "TLS_KRB5_WITH_RC4_128_MD5",
  0x0025: "TLS_KRB5_WITH_IDEA_CBC_MD5",
  0x0026: "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA",
  0x0027: "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA",
  0x0028: "TLS_KRB5_EXPORT_WITH_RC4_40_SHA",
  0x0029: "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5",
  0x002a: "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5",
  0x002b: "TLS_KRB5_EXPORT_WITH_RC4_40_MD5",
  0x002c: "TLS_PSK_WITH_NULL_SHA",
  0x002d: "TLS_DHE_PSK_WITH_NULL_SHA",
  0x002e: "TLS_RSA_PSK_WITH_NULL_SHA",
  0x002f: "TLS_RSA_WITH_AES_128_CBC_SHA",
  0x0030: "TLS_DH_DSS_WITH_AES_128_CBC_SHA",
  0x0031: "TLS_DH_RSA_WITH_AES_128_CBC_SHA",
  0x0032: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
  0x0033: "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
  0x0034: "TLS_DH_anon_WITH_AES_128_CBC_SHA",
  0x0035: "TLS_RSA_WITH_AES_256_CBC_SHA",
  0x0036: "TLS_DH_DSS_WITH_AES_256_CBC_SHA",
  0x0037: "TLS_DH_RSA_WITH_AES_256_CBC_SHA",
  0x0038: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
  0x0039: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
  0x003a: "TLS_DH_anon_WITH_AES_256_CBC_SHA",
  0x003b: "TLS_RSA_WITH_NULL_SHA256",
  0x003c: "TLS_RSA_WITH_AES_128_CBC_SHA256",
  0x003d: "TLS_RSA_WITH_AES_256_CBC_SHA256",
  0x003e: "TLS_DH_DSS_WITH_AES_128_CBC_SHA256",
  0x003f: "TLS_DH_RSA_WITH_AES_128_CBC_SHA256",
  0x0040: "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
  0x0041: "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA",
  0x0042: "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA",
  0x0043: "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA",
  0x0044: "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA",
  0x0045: "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA",
  0x0046: "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA",
  0x0046: "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA",
  0x0060: "TLS_RSA_EXPORT1024_WITH_RC4_56_MD5",
  0x0061: "TLS_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5",
  0x0062: "TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA",
  0x0063: "TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA",
  0x0064: "TLS_RSA_EXPORT1024_WITH_RC4_56_SHA",
  0x0065: "TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA",
  0x0066: "TLS_DHE_DSS_WITH_RC4_128_SHA",
  0xc047: "TLS_DH_anon_WITH_ARIA_256_CBC_SHA384",
  0xc048: "TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256",
  0xc00c: "TLS_ECDH_RSA_WITH_RC4_128_SHA",
  0xc04a: "TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256",
  0xc04b: "TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384",
  0xc04c: "TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256",
  0xc04d: "TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384",
  0xc04e: "TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256",
  0xc00d: "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA",
  0xc050: "TLS_RSA_WITH_ARIA_128_GCM_SHA256",
  0xc051: "TLS_RSA_WITH_ARIA_256_GCM_SHA384",
  0xc052: "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256",
  0xc053: "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384",
  0xc054: "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256",
  0xc00e: "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA",
  0xc056: "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256",
  0xc057: "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384",
  0xc058: "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256",
  0xc059: "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384",
  0xc05a: "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256",
  0xc00f: "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA",
  0xc05c: "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256",
  0xc05d: "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384",
  0xc05e: "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256",
  0xc05f: "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384",
  0xc003: "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA",
  0xc010: "TLS_ECDHE_RSA_WITH_NULL_SHA",
  0xc062: "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256",
  0xc063: "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384",
  0xc064: "TLS_PSK_WITH_ARIA_128_CBC_SHA256",
  0xc065: "TLS_PSK_WITH_ARIA_256_CBC_SHA384",
  0xc066: "TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256",
  0x0067: "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256",
  0x0068: "TLS_DH_DSS_WITH_AES_256_CBC_SHA256",
  0x0069: "TLS_DH_RSA_WITH_AES_256_CBC_SHA256",
  0x006a: "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
  0x006b: "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256",
  0x006c: "TLS_DH_anon_WITH_AES_128_CBC_SHA256",
  0x006d: "TLS_DH_anon_WITH_AES_256_CBC_SHA256",
  0xc06e: "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256",
  0xc06f: "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384",
  0xc070: "TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256",
  0xc068: "TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256",
  0xc072: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256",
  0xc013: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
  0xc074: "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256",
  0xc075: "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384",
  0xc076: "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",
  0xc069: "TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384",
  0xc078: "TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256",
  0xc014: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
  0xc07a: "TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256",
  0xc026: "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384",
  0xc07c: "TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256",
  0xc06a: "TLS_PSK_WITH_ARIA_128_GCM_SHA256",
  0xc004: "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA",
  0xc015: "TLS_ECDH_anon_WITH_NULL_SHA",
  0xc080: "TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256",
  0xc081: "TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384",
  0xc082: "TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256",
  0xc06b: "TLS_PSK_WITH_ARIA_256_GCM_SHA384",
  0x0084: "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA",
  0x0085: "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA",
  0x0086: "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA",
  0x0087: "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA",
  0x0088: "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA",
  0x0089: "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA",
  0x008a: "TLS_PSK_WITH_RC4_128_SHA",
  0x008b: "TLS_PSK_WITH_3DES_EDE_CBC_SHA",
  0x008c: "TLS_PSK_WITH_AES_128_CBC_SHA",
  0x008d: "TLS_PSK_WITH_AES_256_CBC_SHA",
  0x008e: "TLS_DHE_PSK_WITH_RC4_128_SHA",
  0x008f: "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA",
  0x0090: "TLS_DHE_PSK_WITH_AES_128_CBC_SHA",
  0x0091: "TLS_DHE_PSK_WITH_AES_256_CBC_SHA",
  0x0092: "TLS_RSA_PSK_WITH_RC4_128_SHA",
  0x0093: "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA",
  0x0094: "TLS_RSA_PSK_WITH_AES_128_CBC_SHA",
  0x0095: "TLS_RSA_PSK_WITH_AES_256_CBC_SHA",
  0x0096: "TLS_RSA_WITH_SEED_CBC_SHA",
  0x0097: "TLS_DH_DSS_WITH_SEED_CBC_SHA",
  0x0098: "TLS_DH_RSA_WITH_SEED_CBC_SHA",
  0x0099: "TLS_DHE_DSS_WITH_SEED_CBC_SHA",
  0x009a: "TLS_DHE_RSA_WITH_SEED_CBC_SHA",
  0x009b: "TLS_DH_anon_WITH_SEED_CBC_SHA",
  0x009c: "TLS_RSA_WITH_AES_128_GCM_SHA256",
  0x009d: "TLS_RSA_WITH_AES_256_GCM_SHA384",
  0x009e: "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
  0x009f: "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
  0x00a0: "TLS_DH_RSA_WITH_AES_128_GCM_SHA256",
  0x00a1: "TLS_DH_RSA_WITH_AES_256_GCM_SHA384",
  0x00a2: "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256",
  0x00a3: "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384",
  0x00a4: "TLS_DH_DSS_WITH_AES_128_GCM_SHA256",
  0x00a5: "TLS_DH_DSS_WITH_AES_256_GCM_SHA384",
  0x00a6: "TLS_DH_anon_WITH_AES_128_GCM_SHA256",
  0x00a7: "TLS_DH_anon_WITH_AES_256_GCM_SHA384",
  0x00a8: "TLS_PSK_WITH_AES_128_GCM_SHA256",
  0x00a9: "TLS_PSK_WITH_AES_256_GCM_SHA384",
  0x00aa: "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256",
  0x00ab: "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384",
  0x00ac: "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256",
  0x00ad: "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384",
  0x00ae: "TLS_PSK_WITH_AES_128_CBC_SHA256",
  0x00af: "TLS_PSK_WITH_AES_256_CBC_SHA384",
  0x00b0: "TLS_PSK_WITH_NULL_SHA256",
  0x00b1: "TLS_PSK_WITH_NULL_SHA384",
  0x00b2: "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256",
  0x00b3: "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384",
  0x00b4: "TLS_DHE_PSK_WITH_NULL_SHA256",
  0x00b5: "TLS_DHE_PSK_WITH_NULL_SHA384",
  0x00b6: "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256",
  0x00b7: "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384",
  0x00b8: "TLS_RSA_PSK_WITH_NULL_SHA256",
  0x00b9: "TLS_RSA_PSK_WITH_NULL_SHA384",
  0x00ba: "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256",
  0x00bb: "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256",
  0x00bc: "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256",
  0x00bd: "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256",
  0x00be: "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256",
  0x00bf: "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256",
  0x00c0: "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256",
  0x00c1: "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256",
  0x00c2: "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256",
  0x00c3: "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256",
  0x00c4: "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256",
  0x00c5: "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256",
  0xc021: "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA",
  0xc077: "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384",
  0xc08f: "TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384",
  0xc022: "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA",
  0xc06d: "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384",
  0xc023: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
  0xc018: "TLS_ECDH_anon_WITH_AES_128_CBC_SHA",
  0xc079: "TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384",
  0xc007: "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA",
  0xc024: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
  0xc012: "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
  0xc025: "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256",
  0xd003: "TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256",
  0xc07b: "TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384",
  0xc001: "TLS_ECDH_ECDSA_WITH_NULL_SHA",
  0xccac: "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
  0xccae: "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256",
  0xc0a1: "TLS_RSA_WITH_AES_256_CCM_8",
  0xc027: "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
  0xc07d: "TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384",
  0xc028: "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
  0xc0af: "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8",
  0xc019: "TLS_ECDH_anon_WITH_AES_256_CBC_SHA",
  0xc07e: "TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256",
  0xc008: "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
  0xc029: "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256",
  0xc07f: "TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384",
  0xc02a: "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384",
  0xd004: "Unassigned",
  0x00ff: "TLS_EMPTY_RENEGOTIATION_INFO_SCSV",
  0xc02b: "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
  0xc0ab: "TLS_PSK_DHE_WITH_AES_256_CCM_8",
  0xc091: "TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384",
  0xc02c: "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
  0xcca8: "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
  0xc02d: "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256",
  0xc033: "TLS_ECDHE_PSK_WITH_RC4_128_SHA",
  0xc01a: "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA",
  0xc083: "TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384",
  0xc009: "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
  0xc02e: "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384",
  0xc084: "TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256",
  0xc02f: "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
  0xd005: "TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256",
  0xc085: "TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384",
  0xc030: "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
  0xc08c: "TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256",
  0xc086: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256",
  0xc031: "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256",
  0xc087: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384",
  0xc032: "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384",
  0xc01b: "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA",
  0xc088: "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256",
  0xc00a: "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
  0xc016: "TLS_ECDH_anon_WITH_RC4_128_SHA",
  0xc089: "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384",
  0xc034: "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA",
  0xc005: "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA",
  0xc03f: "TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384",
  0xc035: "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA",
  0xccab: "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256",
  0xc08b: "TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384",
  0xc036: "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA",
  0xc071: "TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384",
  0xc060: "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256",
  0xc037: "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256",
  0xd001: "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256",
  0xc08d: "TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384",
  0xc00b: "TLS_ECDH_RSA_WITH_NULL_SHA",
  0xc038: "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384",
  0xc08e: "TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256",
  0xc039: "TLS_ECDHE_PSK_WITH_NULL_SHA",
  0xc011: "TLS_ECDHE_RSA_WITH_RC4_128_SHA",
  0xc03a: "TLS_ECDHE_PSK_WITH_NULL_SHA256",
  0xc090: "TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256",
  0xc03b: "TLS_ECDHE_PSK_WITH_NULL_SHA384",
  0xc061: "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384",
  0xc03c: "TLS_RSA_WITH_ARIA_128_CBC_SHA256",
  0xc092: "TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256",
  0xc03d: "TLS_RSA_WITH_ARIA_256_CBC_SHA384",
  0xc093: "TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384",
  0xc03e: "TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256",
  0xc094: "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256",
  0xc002: "TLS_ECDH_ECDSA_WITH_RC4_128_SHA",
  0xc095: "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384",
  0xc040: "TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256",
  0xc073: "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384",
  0xc096: "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256",
  0xc041: "TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384",
  0xc01e: "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA",
  0xc097: "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384",
  0xccad: "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256",
  0xc042: "TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256",
  0xc098: "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256",
  0xc043: "TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384",
  0xc099: "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384",
  0xc044: "TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256",
  0xc067: "TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384",
  0xc09a: "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256",
  0xc045: "TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384",
  0xc09b: "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384",
  0x5600: "TLS_FALLBACK_SCSV",
  0xc046: "TLS_DH_anon_WITH_ARIA_128_CBC_SHA256",
  0xc06c: "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256",
  0xc01f: "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA",
  0xc09c: "TLS_RSA_WITH_AES_128_CCM",
  0xc05b: "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384",
  0xc09d: "TLS_RSA_WITH_AES_256_CCM",
  0xc09e: "TLS_DHE_RSA_WITH_AES_128_CCM",
  0xc049: "TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384",
  0xc09f: "TLS_DHE_RSA_WITH_AES_256_CCM",
  0xc0a0: "TLS_RSA_WITH_AES_128_CCM_8",
  0xc0ad: "TLS_ECDHE_ECDSA_WITH_AES_256_CCM",
  0xc020: "TLS_SRP_SHA_WITH_AES_256_CBC_SHA",
  0xc017: "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA",
  0xc0a2: "TLS_DHE_RSA_WITH_AES_128_CCM_8",
  0xc0ae: "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8",
  0xc006: "TLS_ECDHE_ECDSA_WITH_NULL_SHA",
  0xd002: "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384",
  0xc0a4: "TLS_PSK_WITH_AES_128_CCM",
  0xcca9: "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
  0xc04f: "TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384",
  0xc0a5: "TLS_PSK_WITH_AES_256_CCM",
  0xd000: "Unassigned",
  0xc0a6: "TLS_DHE_PSK_WITH_AES_128_CCM",
  0xccaa: "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
  0xc0a3: "TLS_DHE_RSA_WITH_AES_256_CCM_8",
  0xc0a7: "TLS_DHE_PSK_WITH_AES_256_CCM",
  0xc0a8: "TLS_PSK_WITH_AES_128_CCM_8",
  0xc0ac: "TLS_ECDHE_ECDSA_WITH_AES_128_CCM",
  0xc0a9: "TLS_PSK_WITH_AES_256_CCM_8",
  0xc08a: "TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256",
  0xc0aa: "TLS_PSK_DHE_WITH_AES_128_CCM_8",
  0xc055: "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384",


# GOST
  0x0080: "TLS_GOSTR341094_WITH_28147_CNT_IMIT",
  0x0081: "TLS_GOSTR341001_WITH_28147_CNT_IMIT",
  0x0082: "TLS_GOSTR341094_WITH_NULL_GOSTR3411",
  0x0083: "TLS_GOSTR341001_WITH_NULL_GOSTR3411",
  # 0xff** are reserved for private use, but we do make an attempt to figure them out
  ## https://www.cryptopro.ru/sites/default/files/products/csp/rus-popov-tls-gost-00-rf.pdf
  0xff85: "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT",
  0xff87: "TLS_GOSTR341112_256_WITH_NULL_GOSTR3411",
  # https://opensource.apple.com/source/Security/Security-55163.44/libsecurity_ssl/Security/CipherSuite.h?txt
  0xff80: "SSL_RSA_WITH_RC2_CBC_MD5",
  0xff81: "SSL_RSA_WITH_IDEA_CBC_MD5",
  0xff82: "SSL_RSA_WITH_DES_CBC_MD5",
  0xff83: "SSL_RSA_WITH_3DES_EDE_CBC_MD5",
  ## TLS 1.3
  0x1301: "TLS_AES_128_GCM_SHA256",
  0x1302: "TLS_AES_256_GCM_SHA384",
  0x1303: "TLS_CHACHA20_POLY1305_SHA256",
  0x1304: "TLS_AES_128_CCM_SHA256",
  0x1305: "TLS_AES_128_CCM_8_SHA256",
  ### SSL
  0x001c: "SSL_FORTEZZA_KEA_WITH_NULL_SHA",
  0x001d: "SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA",
  0x001e: "SSL_FORTEZZA_KEA_WITH_RC4_128_SHA",
  0xfefe: "SSL_RSA_FIPS_WITH_DES_CBC_SHA",
  0xfeff: "SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA",
  0xffe0: "SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA",
  0xffe1: "SSL_RSA_FIPS_WITH_DES_CBC_SHA",

  0x0a0a: "GREASE",

  # LEGACY
  0xcc13: "LEGACY_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
  0xcc14: "LEGACY_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
  0xcc15: "LEGACY_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
}

collected_ext_set = set([0x000a, 0x000b, 0x000d, 0x0010, 43, 45, 51, 0x001b, 0x001c])

ext_dict = {
  0x0000: "server_name",
  0x0001: "max_fragment_length",
  0x0002: "client_certificate_url",
  0x0003: "trusted_ca_keys",
  0x0004: "truncated_hmac",
  0x0005: "status_request",
  0x0006: "user_mapping",
  0x0007: "client_authz",
  0x0008: "server_authz",
  0x0009: "cert_type",
  0x000a: "supported_groups",
  0x000b: "ec_point_formats",
  0x000c: "srp",
  0x000d: "signature_algorithms",
  0x000e: "use_srtp",
  0x000f: "heartbeat",
  0x0010: "application_layer_protocol_negotiation",
  0x0011: "status_request_v2",
  0x0012: "signed_certificate_timestamp",
  0x0013: "client_certificate_type",
  0x0014: "server_certificate_type",
  0x0015: "padding",
  0x0016: "encrypt_then_mac",
  0x0017: "extended_master_secret",
  0x0018: "token_binding",
  0x0019: "cached_info",
  0xff01: "renegotiation_info",
  0x0023: "SessionTicket TLS",
  0x3374: "NPN",
  0x7550: "ChannelID",
  # TLS 1.3 extensions https://github.com/tlswg/tls13-spec/blob/master/draft-ietf-tls-tls13.md#extensions
  40: "extended_random",
  41: "pre_shared_key",
  42: "early_data",
  43: "supported_versions",
  44: "cookie",
  45: "psk_key_exchange_modes",
  47: "certificate_authorities",
  48: "old_filters",
  49: "post_handshake_auth",
  50: "signature_algorithms_cert",
  51: "key_share",

  0x001b: "compressed_certificate", # draft
  0x001c: "record_size_limit", # draft
  0x0022: "delegated_credential" # draft
  0x4469: "application_settings", # draft

  0x0a0a: "GREASE",
  0x5500: "LEGACY_token_binding",    # https://community.qualys.com/thread/15849
  0x754f: "LEGACY_ChannelID",
  35655:  "LEGACY_padding",          # https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/NSS_3.15.5_release_notes
}

curve_dict = {
  0x0000: "Unassigned",
  0x0001: "sect163k1",
  0x0002: "sect163r1",
  0x0003: "sect163r2",
  0x0004: "sect193r1",
  0x0005: "sect193r2",
  0x0006: "sect233k1",
  0x0007: "sect233r1",
  0x0008: "sect239k1",
  0x0009: "sect283k1",
  0x000a: "sect283r1",
  0x000b: "sect409k1",
  0x000c: "sect409r1",
  0x000d: "sect571k1",
  0x000e: "sect571r1",
  0x000f: "secp160k1",
  0x0010: "secp160r1",
  0x0011: "secp160r2",
  0x0012: "secp192k1",
  0x0013: "secp192r1",
  0x0014: "secp224k1",
  0x0015: "secp224r1",
  0x0016: "secp256k1",
  0x0017: "secp256r1",
  0x0018: "secp384r1",
  0x0019: "secp521r1",
  0x001a: "brainpoolP256r1",
  0x001b: "brainpoolP384r1",
  0x001c: "brainpoolP512r1",
  0x001d: "x25519",
  0x001e: "x448",
  0x0104: "ffdhe8192",
  0x0101: "ffdhe3072",
  0xff02: "arbitrary_explicit_char2_curves",
  0x0100: "ffdhe2048",
  0x0102: "ffdhe4096",
  0xff01: "arbitrary_explicit_prime_curves",
  0x0103: "ffdhe6144",
  0xff00: "Unassigned",
  0x0a0a: "GREASE",
}


sig_dict = {
  0: 'anonymous',
  1: 'rsa',
  2: 'dsa',
  3: 'ecdsa',
  7: 'ed25519',
  8: 'ed448',
}

hash_dict = {
  0: 'none',
  1: 'md5',
  2: 'sha1',
  3: 'sha224',
  4: 'sha256',
  5: 'sha384',
  6: 'sha512',
  8: 'Intrinsic',
}

# Defined in TLS 1.3
sig_scheme_dict = {
    # RSASSA-PKCS1-v1_5 algorithms
    0x0401: 'rsa_pkcs1_sha256',
    0x0501: 'rsa_pkcs1_sha384',
    0x0601: 'rsa_pkcs1_sha512',
    # ECDSA
    0x0403: 'ecdsa_secp256r1_sha256',
    0x0503: 'ecdsa_secp384r1_sha384',
    0x0603: 'ecdsa_secp521r1_sha512',
    # RSASSA-PSS (public key (rsaEncryption)
    0x0804: 'rsa_pss_rsae_sha256',
    0x0805: 'rsa_pss_rsae_sha384',
    0x0806: 'rsa_pss_rsae_sha512',
    #EdDSA
    0x0807: 'ed25519',
    0x0808: 'ed448',
    # RSASSA-PSS (public key RSASSA-PSS)
    0x0809: 'rsa_pss_pss_sha256',
    0x080a: 'rsa_pss_pss_sha384',
    0x080b: 'rsa_pss_pss_sha512',
    # Legacy
    0x0201: 'rsa_pkcs1_sha1',
    0x0203: 'ecdsa_sha1'
}

comp_dict = {
  0: 'null',
  1: 'DEFLATE',
  64: 'LZS',
}

pt_fmt_dict = {
  0: 'uncompressed',
  1: 'ansiX962_compressed_prime',
  2: 'ansiX962_compressed_char2',
}

versions_dict = {
    0x0200: 'SSL 2.0',
    0x0300: 'SSL 3.0',
    0x0301: 'TLS 1.0',
    0x0302: 'TLS 1.1',
    0x0303: 'TLS 1.2',
    0x0304: 'TLS 1.3',
    # drafts
    0x7f00: 'TLS 1.3-draft-0',
    0x7f01: 'TLS 1.3-draft-1',
    0x7f02: 'TLS 1.3-draft-2',
    0x7f03: 'TLS 1.3-draft-3',
    0x7f04: 'TLS 1.3-draft-4',
    0x7f05: 'TLS 1.3-draft-5',
    0x7f06: 'TLS 1.3-draft-6',
    0x7f07: 'TLS 1.3-draft-7',
    0x7f08: 'TLS 1.3-draft-8',
    0x7f09: 'TLS 1.3-draft-9',
    0x7f0a: 'TLS 1.3-draft-10',
    0x7f0b: 'TLS 1.3-draft-11',
    0x7f0c: 'TLS 1.3-draft-12',
    0x7f0d: 'TLS 1.3-draft-13',
    0x7f0e: 'TLS 1.3-draft-14',
    0x7f0f: 'TLS 1.3-draft-15',
    0x7f10: 'TLS 1.3-draft-16',
    0x7f11: 'TLS 1.3-draft-17',
    0x7f12: 'TLS 1.3-draft-18',
    0x7f13: 'TLS 1.3-draft-19',
    0x7f14: 'TLS 1.3-draft-20',
    0x7f15: 'TLS 1.3-draft-21',
    0x7f16: 'TLS 1.3-draft-22',
    0x7f17: 'TLS 1.3-draft-23',
    0x7f18: 'TLS 1.3-draft-24',
    0x7f19: 'TLS 1.3-draft-25',
    0x7f1a: 'TLS 1.3-draft-26',
    0x7f1b: 'TLS 1.3-draft-27',
    0x7f1c: 'TLS 1.3-draft-28',
    0x0a0a: 'GREASE',
}

cert_compression_algs_dict = {
    0x0001: 'zlib',
    0x0002: 'brotli',
}

import struct

def sig_algs_to_str(sig_algs):
    return [sa['str'] for sa in parse_sig_algs(sig_algs)]

def parse_sig_algs(sig_algs):
    if sig_algs is None or len(sig_algs) < 2:
        return
    idx = 2
    while idx < len(sig_algs):
        h, s = struct.unpack('!BB', sig_algs[idx:idx+2])
        n = (h << 8) | s
        sa_str = ''
        if n in sig_scheme_dict:
            # TLS 1.3 (or legacy)
            sa_str = sig_scheme_dict[n]
        else:
            # <= TLS 1.2
            hash_s = hash_dict[h] if h in hash_dict else '?'
            sig_s  = sig_dict[s]  if s in sig_dict  else '?'
            sa_str = '%s_%s' % (sig_s, hash_s)
        yield {'h': h,
               's': s,
               'n': n,
               'str': '%s (0x%04x)' % (sa_str, n)}
        idx += 2
